package sitetech.NFCcheckPoint.db;

import org.greenrobot.greendao.annotation.*;

import sitetech.NFCcheckPoint.db.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "HORARIO_POR_RUTA".
 */
@Entity(active = true)
public class horarioPorRuta {

    @Id(autoincrement = true)
    private Long id;
    private long rutaId;
    private long horarioId;
    private boolean eliminado;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient horarioPorRutaDao myDao;

    @ToOne(joinProperty = "horarioId")
    private Horario horario;

    @Generated
    private transient Long horario__resolvedKey;

    @ToOne(joinProperty = "rutaId")
    private Ruta ruta;

    @Generated
    private transient Long ruta__resolvedKey;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public horarioPorRuta() {
    }

    public horarioPorRuta(Long id) {
        this.id = id;
    }

    @Generated
    public horarioPorRuta(Long id, long rutaId, long horarioId, boolean eliminado) {
        this.id = id;
        this.rutaId = rutaId;
        this.horarioId = horarioId;
        this.eliminado = eliminado;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getHorarioPorRutaDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getRutaId() {
        return rutaId;
    }

    public void setRutaId(long rutaId) {
        this.rutaId = rutaId;
    }

    public long getHorarioId() {
        return horarioId;
    }

    public void setHorarioId(long horarioId) {
        this.horarioId = horarioId;
    }

    public boolean getEliminado() {
        return eliminado;
    }

    public void setEliminado(boolean eliminado) {
        this.eliminado = eliminado;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Horario getHorario() {
        long __key = this.horarioId;
        if (horario__resolvedKey == null || !horario__resolvedKey.equals(__key)) {
            __throwIfDetached();
            HorarioDao targetDao = daoSession.getHorarioDao();
            Horario horarioNew = targetDao.load(__key);
            synchronized (this) {
                horario = horarioNew;
            	horario__resolvedKey = __key;
            }
        }
        return horario;
    }

    @Generated
    public void setHorario(Horario horario) {
        if (horario == null) {
            throw new DaoException("To-one property 'horarioId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.horario = horario;
            horarioId = horario.getId();
            horario__resolvedKey = horarioId;
        }
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Ruta getRuta() {
        long __key = this.rutaId;
        if (ruta__resolvedKey == null || !ruta__resolvedKey.equals(__key)) {
            __throwIfDetached();
            RutaDao targetDao = daoSession.getRutaDao();
            Ruta rutaNew = targetDao.load(__key);
            synchronized (this) {
                ruta = rutaNew;
            	ruta__resolvedKey = __key;
            }
        }
        return ruta;
    }

    @Generated
    public void setRuta(Ruta ruta) {
        if (ruta == null) {
            throw new DaoException("To-one property 'rutaId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.ruta = ruta;
            rutaId = ruta.getId();
            ruta__resolvedKey = rutaId;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
