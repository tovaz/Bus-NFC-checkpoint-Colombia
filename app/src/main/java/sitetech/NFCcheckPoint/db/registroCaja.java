package sitetech.NFCcheckPoint.db;

import org.greenrobot.greendao.annotation.*;

import sitetech.NFCcheckPoint.db.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "REGISTRO_CAJA".
 */
@Entity(active = true)
public class registroCaja {

    @Id(autoincrement = true)
    private Long id;
    private java.util.Date fecha;
    private Boolean eliminado;
    private long busId;
    private long rutaId;
    private long cajaId;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient registroCajaDao myDao;

    @ToOne(joinProperty = "busId")
    private Bus bus;

    @Generated
    private transient Long bus__resolvedKey;

    @ToOne(joinProperty = "rutaId")
    private Ruta ruta;

    @Generated
    private transient Long ruta__resolvedKey;

    @ToOne(joinProperty = "cajaId")
    private Caja caja;

    @Generated
    private transient Long caja__resolvedKey;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public registroCaja() {
    }

    public registroCaja(Long id) {
        this.id = id;
    }

    @Generated
    public registroCaja(Long id, java.util.Date fecha, Boolean eliminado, long busId, long rutaId, long cajaId) {
        this.id = id;
        this.fecha = fecha;
        this.eliminado = eliminado;
        this.busId = busId;
        this.rutaId = rutaId;
        this.cajaId = cajaId;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRegistroCajaDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public java.util.Date getFecha() {
        return fecha;
    }

    public void setFecha(java.util.Date fecha) {
        this.fecha = fecha;
    }

    public Boolean getEliminado() {
        return eliminado;
    }

    public void setEliminado(Boolean eliminado) {
        this.eliminado = eliminado;
    }

    public long getBusId() {
        return busId;
    }

    public void setBusId(long busId) {
        this.busId = busId;
    }

    public long getRutaId() {
        return rutaId;
    }

    public void setRutaId(long rutaId) {
        this.rutaId = rutaId;
    }

    public long getCajaId() {
        return cajaId;
    }

    public void setCajaId(long cajaId) {
        this.cajaId = cajaId;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Bus getBus() {
        long __key = this.busId;
        if (bus__resolvedKey == null || !bus__resolvedKey.equals(__key)) {
            __throwIfDetached();
            BusDao targetDao = daoSession.getBusDao();
            Bus busNew = targetDao.load(__key);
            synchronized (this) {
                bus = busNew;
            	bus__resolvedKey = __key;
            }
        }
        return bus;
    }

    @Generated
    public void setBus(Bus bus) {
        if (bus == null) {
            throw new DaoException("To-one property 'busId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.bus = bus;
            busId = bus.getId();
            bus__resolvedKey = busId;
        }
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Ruta getRuta() {
        long __key = this.rutaId;
        if (ruta__resolvedKey == null || !ruta__resolvedKey.equals(__key)) {
            __throwIfDetached();
            RutaDao targetDao = daoSession.getRutaDao();
            Ruta rutaNew = targetDao.load(__key);
            synchronized (this) {
                ruta = rutaNew;
            	ruta__resolvedKey = __key;
            }
        }
        return ruta;
    }

    @Generated
    public void setRuta(Ruta ruta) {
        if (ruta == null) {
            throw new DaoException("To-one property 'rutaId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.ruta = ruta;
            rutaId = ruta.getId();
            ruta__resolvedKey = rutaId;
        }
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Caja getCaja() {
        long __key = this.cajaId;
        if (caja__resolvedKey == null || !caja__resolvedKey.equals(__key)) {
            __throwIfDetached();
            CajaDao targetDao = daoSession.getCajaDao();
            Caja cajaNew = targetDao.load(__key);
            synchronized (this) {
                caja = cajaNew;
            	caja__resolvedKey = __key;
            }
        }
        return caja;
    }

    @Generated
    public void setCaja(Caja caja) {
        if (caja == null) {
            throw new DaoException("To-one property 'cajaId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.caja = caja;
            cajaId = caja.getId();
            caja__resolvedKey = cajaId;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
