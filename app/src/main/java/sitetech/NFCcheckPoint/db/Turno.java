package sitetech.NFCcheckPoint.db;

import org.greenrobot.greendao.annotation.*;

import sitetech.NFCcheckPoint.db.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "TURNO".
 */
@Entity(active = true)
public class Turno {

    @Id(autoincrement = true)
    private Long id;

    @NotNull
    private java.util.Date fechaCreacion;
    private java.util.Date fechaCierre;
    private Long totalBuses;
    private Integer totalAtiempo;
    private Integer totalDemorados;
    private Integer totalAdelantados;
    private boolean eliminada;
    private long operadorCierre;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient TurnoDao myDao;

    @ToOne(joinProperty = "operadorCierre")
    private Usuario usuario;

    @Generated
    private transient Long usuario__resolvedKey;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Turno() {
    }

    public Turno(Long id) {
        this.id = id;
    }

    @Generated
    public Turno(Long id, java.util.Date fechaCreacion, java.util.Date fechaCierre, Long totalBuses, Integer totalAtiempo, Integer totalDemorados, Integer totalAdelantados, boolean eliminada, long operadorCierre) {
        this.id = id;
        this.fechaCreacion = fechaCreacion;
        this.fechaCierre = fechaCierre;
        this.totalBuses = totalBuses;
        this.totalAtiempo = totalAtiempo;
        this.totalDemorados = totalDemorados;
        this.totalAdelantados = totalAdelantados;
        this.eliminada = eliminada;
        this.operadorCierre = operadorCierre;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTurnoDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @NotNull
    public java.util.Date getFechaCreacion() {
        return fechaCreacion;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setFechaCreacion(@NotNull java.util.Date fechaCreacion) {
        this.fechaCreacion = fechaCreacion;
    }

    public java.util.Date getFechaCierre() {
        return fechaCierre;
    }

    public void setFechaCierre(java.util.Date fechaCierre) {
        this.fechaCierre = fechaCierre;
    }

    public Long getTotalBuses() {
        return totalBuses;
    }

    public void setTotalBuses(Long totalBuses) {
        this.totalBuses = totalBuses;
    }

    public Integer getTotalAtiempo() {
        return totalAtiempo;
    }

    public void setTotalAtiempo(Integer totalAtiempo) {
        this.totalAtiempo = totalAtiempo;
    }

    public Integer getTotalDemorados() {
        return totalDemorados;
    }

    public void setTotalDemorados(Integer totalDemorados) {
        this.totalDemorados = totalDemorados;
    }

    public Integer getTotalAdelantados() {
        return totalAdelantados;
    }

    public void setTotalAdelantados(Integer totalAdelantados) {
        this.totalAdelantados = totalAdelantados;
    }

    public boolean getEliminada() {
        return eliminada;
    }

    public void setEliminada(boolean eliminada) {
        this.eliminada = eliminada;
    }

    public long getOperadorCierre() {
        return operadorCierre;
    }

    public void setOperadorCierre(long operadorCierre) {
        this.operadorCierre = operadorCierre;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Usuario getUsuario() {
        long __key = this.operadorCierre;
        if (usuario__resolvedKey == null || !usuario__resolvedKey.equals(__key)) {
            __throwIfDetached();
            UsuarioDao targetDao = daoSession.getUsuarioDao();
            Usuario usuarioNew = targetDao.load(__key);
            synchronized (this) {
                usuario = usuarioNew;
            	usuario__resolvedKey = __key;
            }
        }
        return usuario;
    }

    @Generated
    public void setUsuario(Usuario usuario) {
        if (usuario == null) {
            throw new DaoException("To-one property 'operadorCierre' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.usuario = usuario;
            operadorCierre = usuario.getId();
            usuario__resolvedKey = operadorCierre;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
