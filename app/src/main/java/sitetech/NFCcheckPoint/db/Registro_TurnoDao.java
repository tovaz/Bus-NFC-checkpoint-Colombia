package sitetech.NFCcheckPoint.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REGISTRO__TURNO".
*/
public class Registro_TurnoDao extends AbstractDao<Registro_Turno, Long> {

    public static final String TABLENAME = "REGISTRO__TURNO";

    /**
     * Properties of entity Registro_Turno.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Fecha = new Property(1, java.util.Date.class, "fecha", false, "FECHA");
        public final static Property Eliminado = new Property(2, Boolean.class, "eliminado", false, "ELIMINADO");
        public final static Property MinAtrazado = new Property(3, Integer.class, "minAtrazado", false, "MIN_ATRAZADO");
        public final static Property MinAdelantado = new Property(4, Integer.class, "minAdelantado", false, "MIN_ADELANTADO");
        public final static Property Justificacion = new Property(5, String.class, "justificacion", false, "JUSTIFICACION");
        public final static Property BusId = new Property(6, long.class, "busId", false, "BUS_ID");
        public final static Property RutaId = new Property(7, long.class, "rutaId", false, "RUTA_ID");
        public final static Property TurnoId = new Property(8, long.class, "turnoId", false, "TURNO_ID");
        public final static Property OperadorId = new Property(9, long.class, "operadorId", false, "OPERADOR_ID");
    }

    private DaoSession daoSession;


    public Registro_TurnoDao(DaoConfig config) {
        super(config);
    }
    
    public Registro_TurnoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REGISTRO__TURNO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FECHA\" INTEGER," + // 1: fecha
                "\"ELIMINADO\" INTEGER," + // 2: eliminado
                "\"MIN_ATRAZADO\" INTEGER," + // 3: minAtrazado
                "\"MIN_ADELANTADO\" INTEGER," + // 4: minAdelantado
                "\"JUSTIFICACION\" TEXT," + // 5: justificacion
                "\"BUS_ID\" INTEGER NOT NULL ," + // 6: busId
                "\"RUTA_ID\" INTEGER NOT NULL ," + // 7: rutaId
                "\"TURNO_ID\" INTEGER NOT NULL ," + // 8: turnoId
                "\"OPERADOR_ID\" INTEGER NOT NULL );"); // 9: operadorId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REGISTRO__TURNO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Registro_Turno entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date fecha = entity.getFecha();
        if (fecha != null) {
            stmt.bindLong(2, fecha.getTime());
        }
 
        Boolean eliminado = entity.getEliminado();
        if (eliminado != null) {
            stmt.bindLong(3, eliminado ? 1L: 0L);
        }
 
        Integer minAtrazado = entity.getMinAtrazado();
        if (minAtrazado != null) {
            stmt.bindLong(4, minAtrazado);
        }
 
        Integer minAdelantado = entity.getMinAdelantado();
        if (minAdelantado != null) {
            stmt.bindLong(5, minAdelantado);
        }
 
        String justificacion = entity.getJustificacion();
        if (justificacion != null) {
            stmt.bindString(6, justificacion);
        }
        stmt.bindLong(7, entity.getBusId());
        stmt.bindLong(8, entity.getRutaId());
        stmt.bindLong(9, entity.getTurnoId());
        stmt.bindLong(10, entity.getOperadorId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Registro_Turno entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date fecha = entity.getFecha();
        if (fecha != null) {
            stmt.bindLong(2, fecha.getTime());
        }
 
        Boolean eliminado = entity.getEliminado();
        if (eliminado != null) {
            stmt.bindLong(3, eliminado ? 1L: 0L);
        }
 
        Integer minAtrazado = entity.getMinAtrazado();
        if (minAtrazado != null) {
            stmt.bindLong(4, minAtrazado);
        }
 
        Integer minAdelantado = entity.getMinAdelantado();
        if (minAdelantado != null) {
            stmt.bindLong(5, minAdelantado);
        }
 
        String justificacion = entity.getJustificacion();
        if (justificacion != null) {
            stmt.bindString(6, justificacion);
        }
        stmt.bindLong(7, entity.getBusId());
        stmt.bindLong(8, entity.getRutaId());
        stmt.bindLong(9, entity.getTurnoId());
        stmt.bindLong(10, entity.getOperadorId());
    }

    @Override
    protected final void attachEntity(Registro_Turno entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Registro_Turno readEntity(Cursor cursor, int offset) {
        Registro_Turno entity = new Registro_Turno( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // fecha
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // eliminado
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // minAtrazado
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // minAdelantado
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // justificacion
            cursor.getLong(offset + 6), // busId
            cursor.getLong(offset + 7), // rutaId
            cursor.getLong(offset + 8), // turnoId
            cursor.getLong(offset + 9) // operadorId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Registro_Turno entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFecha(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setEliminado(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setMinAtrazado(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setMinAdelantado(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setJustificacion(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBusId(cursor.getLong(offset + 6));
        entity.setRutaId(cursor.getLong(offset + 7));
        entity.setTurnoId(cursor.getLong(offset + 8));
        entity.setOperadorId(cursor.getLong(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Registro_Turno entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Registro_Turno entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Registro_Turno entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getBusDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getRutaDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getTurnoDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T3", daoSession.getUsuarioDao().getAllColumns());
            builder.append(" FROM REGISTRO__TURNO T");
            builder.append(" LEFT JOIN BUS T0 ON T.\"BUS_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN RUTA T1 ON T.\"RUTA_ID\"=T1.\"_id\"");
            builder.append(" LEFT JOIN TURNO T2 ON T.\"TURNO_ID\"=T2.\"_id\"");
            builder.append(" LEFT JOIN USUARIO T3 ON T.\"OPERADOR_ID\"=T3.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Registro_Turno loadCurrentDeep(Cursor cursor, boolean lock) {
        Registro_Turno entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Bus bus = loadCurrentOther(daoSession.getBusDao(), cursor, offset);
         if(bus != null) {
            entity.setBus(bus);
        }
        offset += daoSession.getBusDao().getAllColumns().length;

        Ruta ruta = loadCurrentOther(daoSession.getRutaDao(), cursor, offset);
         if(ruta != null) {
            entity.setRuta(ruta);
        }
        offset += daoSession.getRutaDao().getAllColumns().length;

        Turno turno = loadCurrentOther(daoSession.getTurnoDao(), cursor, offset);
         if(turno != null) {
            entity.setTurno(turno);
        }
        offset += daoSession.getTurnoDao().getAllColumns().length;

        Usuario usuario = loadCurrentOther(daoSession.getUsuarioDao(), cursor, offset);
         if(usuario != null) {
            entity.setUsuario(usuario);
        }

        return entity;    
    }

    public Registro_Turno loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Registro_Turno> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Registro_Turno> list = new ArrayList<Registro_Turno>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Registro_Turno> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Registro_Turno> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
