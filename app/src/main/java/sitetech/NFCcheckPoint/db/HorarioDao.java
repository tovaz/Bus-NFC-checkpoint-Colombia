package sitetech.NFCcheckPoint.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;
import android.util.Log;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HORARIO".
*/
public class HorarioDao extends AbstractDao<Horario, Long> {

    public static final String TABLENAME = "HORARIO";

    /**
     * Properties of entity Horario.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nombre = new Property(1, String.class, "nombre", false, "NOMBRE");
        public final static Property Hora = new Property(2, String.class, "hora", false, "HORA");
        public final static Property MaxMinutos = new Property(3, Integer.class, "maxMinutos", false, "MAX_MINUTOS");
        public final static Property HoraFestivo = new Property(4, String.class, "horaFestivo", false, "HORA_FESTIVO");
        public final static Property MaxMinutosFestivo = new Property(5, Integer.class, "maxMinutosFestivo", false, "MAX_MINUTOS_FESTIVO");
        public final static Property HoraFinSemana = new Property(6, String.class, "horaFinSemana", false, "HORA_FIN_SEMANA");
        public final static Property MaxMinutosFinSemana = new Property(7, Integer.class, "maxMinutosFinSemana", false, "MAX_MINUTOS_FIN_SEMANA");
        public final static Property Eliminado = new Property(8, boolean.class, "eliminado", false, "ELIMINADO");
    }


    public HorarioDao(DaoConfig config) {
        super(config);
    }
    
    public HorarioDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HORARIO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NOMBRE\" TEXT," + // 1: nombre
                "\"HORA\" TEXT," + // 2: hora
                "\"MAX_MINUTOS\" INTEGER," + // 3: maxMinutos
                "\"HORA_FESTIVO\" TEXT," + // 4: horaFestivo
                "\"MAX_MINUTOS_FESTIVO\" INTEGER," + // 5: maxMinutosFestivo
                "\"HORA_FIN_SEMANA\" TEXT," + // 6: horaFinSemana
                "\"MAX_MINUTOS_FIN_SEMANA\" INTEGER," + // 7: maxMinutosFinSemana
                "\"ELIMINADO\" INTEGER NOT NULL );"); // 8: eliminado
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HORARIO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Horario entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nombre = entity.getNombre();
        if (nombre != null) {
            stmt.bindString(2, nombre);
        }
 
        String hora = entity.getHora();
        if (hora != null) {
            stmt.bindString(3, hora);
        }
 
        Integer maxMinutos = entity.getMaxMinutos();
        if (maxMinutos != null) {
            stmt.bindLong(4, maxMinutos);
        }
 
        String horaFestivo = entity.getHoraFestivo();
        if (horaFestivo != null) {
            stmt.bindString(5, horaFestivo);
        }
 
        Integer maxMinutosFestivo = entity.getMaxMinutosFestivo();
        if (maxMinutosFestivo != null) {
            stmt.bindLong(6, maxMinutosFestivo);
        }
 
        String horaFinSemana = entity.getHoraFinSemana();
        if (horaFinSemana != null) {
            stmt.bindString(7, horaFinSemana);
        }
 
        Integer maxMinutosFinSemana = entity.getMaxMinutosFinSemana();
        if (maxMinutosFinSemana != null) {
            stmt.bindLong(8, maxMinutosFinSemana);
        }
        stmt.bindLong(9, entity.getEliminado() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Horario entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nombre = entity.getNombre();
        if (nombre != null) {
            stmt.bindString(2, nombre);
        }
 
        String hora = entity.getHora();
        if (hora != null) {
            stmt.bindString(3, hora);
        }
 
        Integer maxMinutos = entity.getMaxMinutos();
        if (maxMinutos != null) {
            stmt.bindLong(4, maxMinutos);
        }
 
        String horaFestivo = entity.getHoraFestivo();
        if (horaFestivo != null) {
            stmt.bindString(5, horaFestivo);
        }
 
        Integer maxMinutosFestivo = entity.getMaxMinutosFestivo();
        if (maxMinutosFestivo != null) {
            stmt.bindLong(6, maxMinutosFestivo);
        }
 
        String horaFinSemana = entity.getHoraFinSemana();
        if (horaFinSemana != null) {
            stmt.bindString(7, horaFinSemana);
        }
 
        Integer maxMinutosFinSemana = entity.getMaxMinutosFinSemana();
        if (maxMinutosFinSemana != null) {
            stmt.bindLong(8, maxMinutosFinSemana);
        }
        stmt.bindLong(9, entity.getEliminado() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Horario readEntity(Cursor cursor, int offset) {
        Horario entity = new Horario( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nombre
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // hora
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // maxMinutos
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // horaFestivo
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // maxMinutosFestivo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // horaFinSemana
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // maxMinutosFinSemana
            cursor.getShort(offset + 8) != 0 // eliminado
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Horario entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNombre(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHora(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMaxMinutos(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setHoraFestivo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMaxMinutosFestivo(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setHoraFinSemana(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMaxMinutosFinSemana(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setEliminado(cursor.getShort(offset + 8) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Horario entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Horario entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Horario entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }


}
