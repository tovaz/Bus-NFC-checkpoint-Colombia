package sitetech.NFCcheckPoint.db;

import org.greenrobot.greendao.annotation.*;

import sitetech.NFCcheckPoint.db.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "BUS".
 */
@Entity(active = true)
public class Bus {

    @Id(autoincrement = true)
    private Long id;

    @NotNull
    private String placa;
    private String interno;
    private String tagNfc;
    private Long recorridos;
    private boolean eliminado;
    private String extraString;
    private Integer extraInt;
    private long empresaId;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient BusDao myDao;

    @ToOne(joinProperty = "empresaId")
    private Empresa empresa;

    @Generated
    private transient Long empresa__resolvedKey;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Bus() {
    }

    public Bus(Long id) {
        this.id = id;
    }

    @Generated
    public Bus(Long id, String placa, String interno, String tagNfc, Long recorridos, boolean eliminado, String extraString, Integer extraInt, long empresaId) {
        this.id = id;
        this.placa = placa;
        this.interno = interno;
        this.tagNfc = tagNfc;
        this.recorridos = recorridos;
        this.eliminado = eliminado;
        this.extraString = extraString;
        this.extraInt = extraInt;
        this.empresaId = empresaId;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getBusDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @NotNull
    public String getPlaca() {
        return placa;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPlaca(@NotNull String placa) {
        this.placa = placa;
    }

    public String getInterno() {
        return interno;
    }

    public void setInterno(String interno) {
        this.interno = interno;
    }

    public String getTagNfc() {
        return tagNfc;
    }

    public void setTagNfc(String tagNfc) {
        this.tagNfc = tagNfc;
    }

    public Long getRecorridos() {
        return recorridos;
    }

    public void setRecorridos(Long recorridos) {
        this.recorridos = recorridos;
    }

    public boolean getEliminado() {
        return eliminado;
    }

    public void setEliminado(boolean eliminado) {
        this.eliminado = eliminado;
    }

    public String getExtraString() {
        return extraString;
    }

    public void setExtraString(String extraString) {
        this.extraString = extraString;
    }

    public Integer getExtraInt() {
        return extraInt;
    }

    public void setExtraInt(Integer extraInt) {
        this.extraInt = extraInt;
    }

    public long getEmpresaId() {
        return empresaId;
    }

    public void setEmpresaId(long empresaId) {
        this.empresaId = empresaId;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Empresa getEmpresa() {
        long __key = this.empresaId;
        if (empresa__resolvedKey == null || !empresa__resolvedKey.equals(__key)) {
            __throwIfDetached();
            EmpresaDao targetDao = daoSession.getEmpresaDao();
            Empresa empresaNew = targetDao.load(__key);
            synchronized (this) {
                empresa = empresaNew;
            	empresa__resolvedKey = __key;
            }
        }
        return empresa;
    }

    @Generated
    public void setEmpresa(Empresa empresa) {
        if (empresa == null) {
            throw new DaoException("To-one property 'empresaId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.empresa = empresa;
            empresaId = empresa.getId();
            empresa__resolvedKey = empresaId;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
