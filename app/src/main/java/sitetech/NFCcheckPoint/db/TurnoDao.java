package sitetech.NFCcheckPoint.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TURNO".
*/
public class TurnoDao extends AbstractDao<Turno, Long> {

    public static final String TABLENAME = "TURNO";

    /**
     * Properties of entity Turno.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FechaCreacion = new Property(1, java.util.Date.class, "fechaCreacion", false, "FECHA_CREACION");
        public final static Property FechaCierre = new Property(2, java.util.Date.class, "fechaCierre", false, "FECHA_CIERRE");
        public final static Property TotalBuses = new Property(3, Long.class, "totalBuses", false, "TOTAL_BUSES");
        public final static Property TotalAtiempo = new Property(4, Integer.class, "totalAtiempo", false, "TOTAL_ATIEMPO");
        public final static Property TotalDemorados = new Property(5, Integer.class, "totalDemorados", false, "TOTAL_DEMORADOS");
        public final static Property TotalAdelantados = new Property(6, Integer.class, "totalAdelantados", false, "TOTAL_ADELANTADOS");
        public final static Property ExtraString = new Property(7, String.class, "extraString", false, "EXTRA_STRING");
        public final static Property ExtraInt = new Property(8, Integer.class, "extraInt", false, "EXTRA_INT");
        public final static Property Eliminada = new Property(9, boolean.class, "eliminada", false, "ELIMINADA");
        public final static Property OperadorCierre = new Property(10, long.class, "operadorCierre", false, "OPERADOR_CIERRE");
    }

    private DaoSession daoSession;


    public TurnoDao(DaoConfig config) {
        super(config);
    }
    
    public TurnoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TURNO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FECHA_CREACION\" INTEGER NOT NULL ," + // 1: fechaCreacion
                "\"FECHA_CIERRE\" INTEGER," + // 2: fechaCierre
                "\"TOTAL_BUSES\" INTEGER," + // 3: totalBuses
                "\"TOTAL_ATIEMPO\" INTEGER," + // 4: totalAtiempo
                "\"TOTAL_DEMORADOS\" INTEGER," + // 5: totalDemorados
                "\"TOTAL_ADELANTADOS\" INTEGER," + // 6: totalAdelantados
                "\"EXTRA_STRING\" TEXT," + // 7: extraString
                "\"EXTRA_INT\" INTEGER," + // 8: extraInt
                "\"ELIMINADA\" INTEGER NOT NULL ," + // 9: eliminada
                "\"OPERADOR_CIERRE\" INTEGER NOT NULL );"); // 10: operadorCierre
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TURNO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Turno entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getFechaCreacion().getTime());
 
        java.util.Date fechaCierre = entity.getFechaCierre();
        if (fechaCierre != null) {
            stmt.bindLong(3, fechaCierre.getTime());
        }
 
        Long totalBuses = entity.getTotalBuses();
        if (totalBuses != null) {
            stmt.bindLong(4, totalBuses);
        }
 
        Integer totalAtiempo = entity.getTotalAtiempo();
        if (totalAtiempo != null) {
            stmt.bindLong(5, totalAtiempo);
        }
 
        Integer totalDemorados = entity.getTotalDemorados();
        if (totalDemorados != null) {
            stmt.bindLong(6, totalDemorados);
        }
 
        Integer totalAdelantados = entity.getTotalAdelantados();
        if (totalAdelantados != null) {
            stmt.bindLong(7, totalAdelantados);
        }
 
        String extraString = entity.getExtraString();
        if (extraString != null) {
            stmt.bindString(8, extraString);
        }
 
        Integer extraInt = entity.getExtraInt();
        if (extraInt != null) {
            stmt.bindLong(9, extraInt);
        }
        stmt.bindLong(10, entity.getEliminada() ? 1L: 0L);
        stmt.bindLong(11, entity.getOperadorCierre());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Turno entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getFechaCreacion().getTime());
 
        java.util.Date fechaCierre = entity.getFechaCierre();
        if (fechaCierre != null) {
            stmt.bindLong(3, fechaCierre.getTime());
        }
 
        Long totalBuses = entity.getTotalBuses();
        if (totalBuses != null) {
            stmt.bindLong(4, totalBuses);
        }
 
        Integer totalAtiempo = entity.getTotalAtiempo();
        if (totalAtiempo != null) {
            stmt.bindLong(5, totalAtiempo);
        }
 
        Integer totalDemorados = entity.getTotalDemorados();
        if (totalDemorados != null) {
            stmt.bindLong(6, totalDemorados);
        }
 
        Integer totalAdelantados = entity.getTotalAdelantados();
        if (totalAdelantados != null) {
            stmt.bindLong(7, totalAdelantados);
        }
 
        String extraString = entity.getExtraString();
        if (extraString != null) {
            stmt.bindString(8, extraString);
        }
 
        Integer extraInt = entity.getExtraInt();
        if (extraInt != null) {
            stmt.bindLong(9, extraInt);
        }
        stmt.bindLong(10, entity.getEliminada() ? 1L: 0L);
        stmt.bindLong(11, entity.getOperadorCierre());
    }

    @Override
    protected final void attachEntity(Turno entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Turno readEntity(Cursor cursor, int offset) {
        Turno entity = new Turno( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            new java.util.Date(cursor.getLong(offset + 1)), // fechaCreacion
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // fechaCierre
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // totalBuses
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // totalAtiempo
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // totalDemorados
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // totalAdelantados
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // extraString
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // extraInt
            cursor.getShort(offset + 9) != 0, // eliminada
            cursor.getLong(offset + 10) // operadorCierre
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Turno entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFechaCreacion(new java.util.Date(cursor.getLong(offset + 1)));
        entity.setFechaCierre(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setTotalBuses(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setTotalAtiempo(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setTotalDemorados(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setTotalAdelantados(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setExtraString(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setExtraInt(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setEliminada(cursor.getShort(offset + 9) != 0);
        entity.setOperadorCierre(cursor.getLong(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Turno entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Turno entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Turno entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUsuarioDao().getAllColumns());
            builder.append(" FROM TURNO T");
            builder.append(" LEFT JOIN USUARIO T0 ON T.\"OPERADOR_CIERRE\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Turno loadCurrentDeep(Cursor cursor, boolean lock) {
        Turno entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Usuario usuario = loadCurrentOther(daoSession.getUsuarioDao(), cursor, offset);
         if(usuario != null) {
            entity.setUsuario(usuario);
        }

        return entity;    
    }

    public Turno loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Turno> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Turno> list = new ArrayList<Turno>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Turno> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Turno> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
